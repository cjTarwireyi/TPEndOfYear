#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TestDatabase")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertCustomer(Customer instance);
  partial void UpdateCustomer(Customer instance);
  partial void DeleteCustomer(Customer instance);
  partial void InsertEmployee(Employee instance);
  partial void UpdateEmployee(Employee instance);
  partial void DeleteEmployee(Employee instance);
  partial void InsertOder(Oder instance);
  partial void UpdateOder(Oder instance);
  partial void DeleteOder(Oder instance);
  partial void InsertOrderLine(OrderLine instance);
  partial void UpdateOrderLine(OrderLine instance);
  partial void DeleteOrderLine(OrderLine instance);
  partial void InsertProduct(Product instance);
  partial void UpdateProduct(Product instance);
  partial void DeleteProduct(Product instance);
  partial void InsertSupplier(Supplier instance);
  partial void UpdateSupplier(Supplier instance);
  partial void DeleteSupplier(Supplier instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  partial void InsertUserType(UserType instance);
  partial void UpdateUserType(UserType instance);
  partial void DeleteUserType(UserType instance);
  partial void InsertOder1(Oder1 instance);
  partial void UpdateOder1(Oder1 instance);
  partial void DeleteOder1(Oder1 instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Customer> Customers
	{
		get
		{
			return this.GetTable<Customer>();
		}
	}
	
	public System.Data.Linq.Table<Employee> Employees
	{
		get
		{
			return this.GetTable<Employee>();
		}
	}
	
	public System.Data.Linq.Table<Oder> Oders
	{
		get
		{
			return this.GetTable<Oder>();
		}
	}
	
	public System.Data.Linq.Table<OrderLine> OrderLines
	{
		get
		{
			return this.GetTable<OrderLine>();
		}
	}
	
	public System.Data.Linq.Table<Product> Products
	{
		get
		{
			return this.GetTable<Product>();
		}
	}
	
	public System.Data.Linq.Table<Supplier> Suppliers
	{
		get
		{
			return this.GetTable<Supplier>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
	
	public System.Data.Linq.Table<UserType> UserTypes
	{
		get
		{
			return this.GetTable<UserType>();
		}
	}
	
	public System.Data.Linq.Table<Oder1> Oder1s
	{
		get
		{
			return this.GetTable<Oder1>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customers")]
public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CustomerID;
	
	private string _CustomerName;
	
	private string _CustomerSurname;
	
	private string _CustomerCellNumber;
	
	private string _CustomerStreetName;
	
	private string _CustomerSuburb;
	
	private string _CustomerPostalCode;
	
	private EntitySet<Oder> _Oders;
	
	private EntitySet<Oder1> _Oder1s;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnCustomerSurnameChanging(string value);
    partial void OnCustomerSurnameChanged();
    partial void OnCustomerCellNumberChanging(string value);
    partial void OnCustomerCellNumberChanged();
    partial void OnCustomerStreetNameChanging(string value);
    partial void OnCustomerStreetNameChanged();
    partial void OnCustomerSuburbChanging(string value);
    partial void OnCustomerSuburbChanged();
    partial void OnCustomerPostalCodeChanging(string value);
    partial void OnCustomerPostalCodeChanged();
    #endregion
	
	public Customer()
	{
		this._Oders = new EntitySet<Oder>(new Action<Oder>(this.attach_Oders), new Action<Oder>(this.detach_Oders));
		this._Oder1s = new EntitySet<Oder1>(new Action<Oder1>(this.attach_Oder1s), new Action<Oder1>(this.detach_Oder1s));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CustomerID
	{
		get
		{
			return this._CustomerID;
		}
		set
		{
			if ((this._CustomerID != value))
			{
				this.OnCustomerIDChanging(value);
				this.SendPropertyChanging();
				this._CustomerID = value;
				this.SendPropertyChanged("CustomerID");
				this.OnCustomerIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="NChar(30)")]
	public string CustomerName
	{
		get
		{
			return this._CustomerName;
		}
		set
		{
			if ((this._CustomerName != value))
			{
				this.OnCustomerNameChanging(value);
				this.SendPropertyChanging();
				this._CustomerName = value;
				this.SendPropertyChanged("CustomerName");
				this.OnCustomerNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerSurname", DbType="NChar(30)")]
	public string CustomerSurname
	{
		get
		{
			return this._CustomerSurname;
		}
		set
		{
			if ((this._CustomerSurname != value))
			{
				this.OnCustomerSurnameChanging(value);
				this.SendPropertyChanging();
				this._CustomerSurname = value;
				this.SendPropertyChanged("CustomerSurname");
				this.OnCustomerSurnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerCellNumber", DbType="NChar(30)")]
	public string CustomerCellNumber
	{
		get
		{
			return this._CustomerCellNumber;
		}
		set
		{
			if ((this._CustomerCellNumber != value))
			{
				this.OnCustomerCellNumberChanging(value);
				this.SendPropertyChanging();
				this._CustomerCellNumber = value;
				this.SendPropertyChanged("CustomerCellNumber");
				this.OnCustomerCellNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerStreetName", DbType="NChar(30)")]
	public string CustomerStreetName
	{
		get
		{
			return this._CustomerStreetName;
		}
		set
		{
			if ((this._CustomerStreetName != value))
			{
				this.OnCustomerStreetNameChanging(value);
				this.SendPropertyChanging();
				this._CustomerStreetName = value;
				this.SendPropertyChanged("CustomerStreetName");
				this.OnCustomerStreetNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerSuburb", DbType="NChar(30)")]
	public string CustomerSuburb
	{
		get
		{
			return this._CustomerSuburb;
		}
		set
		{
			if ((this._CustomerSuburb != value))
			{
				this.OnCustomerSuburbChanging(value);
				this.SendPropertyChanging();
				this._CustomerSuburb = value;
				this.SendPropertyChanged("CustomerSuburb");
				this.OnCustomerSuburbChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPostalCode", DbType="NChar(10)")]
	public string CustomerPostalCode
	{
		get
		{
			return this._CustomerPostalCode;
		}
		set
		{
			if ((this._CustomerPostalCode != value))
			{
				this.OnCustomerPostalCodeChanging(value);
				this.SendPropertyChanging();
				this._CustomerPostalCode = value;
				this.SendPropertyChanged("CustomerPostalCode");
				this.OnCustomerPostalCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Oder", Storage="_Oders", ThisKey="CustomerID", OtherKey="custId")]
	public EntitySet<Oder> Oders
	{
		get
		{
			return this._Oders;
		}
		set
		{
			this._Oders.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Oder1", Storage="_Oder1s", ThisKey="CustomerID", OtherKey="custId")]
	public EntitySet<Oder1> Oder1s
	{
		get
		{
			return this._Oder1s;
		}
		set
		{
			this._Oder1s.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Oders(Oder entity)
	{
		this.SendPropertyChanging();
		entity.Customer = this;
	}
	
	private void detach_Oders(Oder entity)
	{
		this.SendPropertyChanging();
		entity.Customer = null;
	}
	
	private void attach_Oder1s(Oder1 entity)
	{
		this.SendPropertyChanging();
		entity.Customer = this;
	}
	
	private void detach_Oder1s(Oder1 entity)
	{
		this.SendPropertyChanging();
		entity.Customer = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _EmployeeID;
	
	private string _EmployeeName;
	
	private string _EmployeeSurname;
	
	private string _EmployeeCellNumber;
	
	private string _EmployeeStreetName;
	
	private string _EmployeeSuburb;
	
	private string _EmployeePostalCode;
	
	private string _DateHired;
	
	private EntitySet<Oder> _Oders;
	
	private EntitySet<Oder1> _Oder1s;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnEmployeeNameChanging(string value);
    partial void OnEmployeeNameChanged();
    partial void OnEmployeeSurnameChanging(string value);
    partial void OnEmployeeSurnameChanged();
    partial void OnEmployeeCellNumberChanging(string value);
    partial void OnEmployeeCellNumberChanged();
    partial void OnEmployeeStreetNameChanging(string value);
    partial void OnEmployeeStreetNameChanged();
    partial void OnEmployeeSuburbChanging(string value);
    partial void OnEmployeeSuburbChanged();
    partial void OnEmployeePostalCodeChanging(string value);
    partial void OnEmployeePostalCodeChanged();
    partial void OnDateHiredChanging(string value);
    partial void OnDateHiredChanged();
    #endregion
	
	public Employee()
	{
		this._Oders = new EntitySet<Oder>(new Action<Oder>(this.attach_Oders), new Action<Oder>(this.detach_Oders));
		this._Oder1s = new EntitySet<Oder1>(new Action<Oder1>(this.attach_Oder1s), new Action<Oder1>(this.detach_Oder1s));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int EmployeeID
	{
		get
		{
			return this._EmployeeID;
		}
		set
		{
			if ((this._EmployeeID != value))
			{
				this.OnEmployeeIDChanging(value);
				this.SendPropertyChanging();
				this._EmployeeID = value;
				this.SendPropertyChanged("EmployeeID");
				this.OnEmployeeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="NChar(30)")]
	public string EmployeeName
	{
		get
		{
			return this._EmployeeName;
		}
		set
		{
			if ((this._EmployeeName != value))
			{
				this.OnEmployeeNameChanging(value);
				this.SendPropertyChanging();
				this._EmployeeName = value;
				this.SendPropertyChanged("EmployeeName");
				this.OnEmployeeNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeSurname", DbType="NChar(40)")]
	public string EmployeeSurname
	{
		get
		{
			return this._EmployeeSurname;
		}
		set
		{
			if ((this._EmployeeSurname != value))
			{
				this.OnEmployeeSurnameChanging(value);
				this.SendPropertyChanging();
				this._EmployeeSurname = value;
				this.SendPropertyChanged("EmployeeSurname");
				this.OnEmployeeSurnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeCellNumber", DbType="NChar(20)")]
	public string EmployeeCellNumber
	{
		get
		{
			return this._EmployeeCellNumber;
		}
		set
		{
			if ((this._EmployeeCellNumber != value))
			{
				this.OnEmployeeCellNumberChanging(value);
				this.SendPropertyChanging();
				this._EmployeeCellNumber = value;
				this.SendPropertyChanged("EmployeeCellNumber");
				this.OnEmployeeCellNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeStreetName", DbType="NChar(30)")]
	public string EmployeeStreetName
	{
		get
		{
			return this._EmployeeStreetName;
		}
		set
		{
			if ((this._EmployeeStreetName != value))
			{
				this.OnEmployeeStreetNameChanging(value);
				this.SendPropertyChanging();
				this._EmployeeStreetName = value;
				this.SendPropertyChanged("EmployeeStreetName");
				this.OnEmployeeStreetNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeSuburb", DbType="NChar(30)")]
	public string EmployeeSuburb
	{
		get
		{
			return this._EmployeeSuburb;
		}
		set
		{
			if ((this._EmployeeSuburb != value))
			{
				this.OnEmployeeSuburbChanging(value);
				this.SendPropertyChanging();
				this._EmployeeSuburb = value;
				this.SendPropertyChanged("EmployeeSuburb");
				this.OnEmployeeSuburbChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeePostalCode", DbType="NChar(10)")]
	public string EmployeePostalCode
	{
		get
		{
			return this._EmployeePostalCode;
		}
		set
		{
			if ((this._EmployeePostalCode != value))
			{
				this.OnEmployeePostalCodeChanging(value);
				this.SendPropertyChanging();
				this._EmployeePostalCode = value;
				this.SendPropertyChanged("EmployeePostalCode");
				this.OnEmployeePostalCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateHired", DbType="NChar(10)")]
	public string DateHired
	{
		get
		{
			return this._DateHired;
		}
		set
		{
			if ((this._DateHired != value))
			{
				this.OnDateHiredChanging(value);
				this.SendPropertyChanging();
				this._DateHired = value;
				this.SendPropertyChanged("DateHired");
				this.OnDateHiredChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Oder", Storage="_Oders", ThisKey="EmployeeID", OtherKey="employeeId")]
	public EntitySet<Oder> Oders
	{
		get
		{
			return this._Oders;
		}
		set
		{
			this._Oders.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Oder1", Storage="_Oder1s", ThisKey="EmployeeID", OtherKey="employeeId")]
	public EntitySet<Oder1> Oder1s
	{
		get
		{
			return this._Oder1s;
		}
		set
		{
			this._Oder1s.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Oders(Oder entity)
	{
		this.SendPropertyChanging();
		entity.Employee = this;
	}
	
	private void detach_Oders(Oder entity)
	{
		this.SendPropertyChanging();
		entity.Employee = null;
	}
	
	private void attach_Oder1s(Oder1 entity)
	{
		this.SendPropertyChanging();
		entity.Employee = this;
	}
	
	private void detach_Oder1s(Oder1 entity)
	{
		this.SendPropertyChanging();
		entity.Employee = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Oders")]
public partial class Oder : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _orderId;
	
	private int _custId;
	
	private System.Nullable<bool> _payed;
	
	private System.Nullable<double> _amount;
	
	private System.Nullable<System.DateTime> _orderDate;
	
	private System.Nullable<int> _employeeId;
	
	private EntityRef<Customer> _Customer;
	
	private EntityRef<Employee> _Employee;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorderIdChanging(int value);
    partial void OnorderIdChanged();
    partial void OncustIdChanging(int value);
    partial void OncustIdChanged();
    partial void OnpayedChanging(System.Nullable<bool> value);
    partial void OnpayedChanged();
    partial void OnamountChanging(System.Nullable<double> value);
    partial void OnamountChanged();
    partial void OnorderDateChanging(System.Nullable<System.DateTime> value);
    partial void OnorderDateChanged();
    partial void OnemployeeIdChanging(System.Nullable<int> value);
    partial void OnemployeeIdChanged();
    #endregion
	
	public Oder()
	{
		this._Customer = default(EntityRef<Customer>);
		this._Employee = default(EntityRef<Employee>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int orderId
	{
		get
		{
			return this._orderId;
		}
		set
		{
			if ((this._orderId != value))
			{
				this.OnorderIdChanging(value);
				this.SendPropertyChanging();
				this._orderId = value;
				this.SendPropertyChanged("orderId");
				this.OnorderIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_custId", DbType="Int NOT NULL")]
	public int custId
	{
		get
		{
			return this._custId;
		}
		set
		{
			if ((this._custId != value))
			{
				if (this._Customer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OncustIdChanging(value);
				this.SendPropertyChanging();
				this._custId = value;
				this.SendPropertyChanged("custId");
				this.OncustIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_payed", DbType="Bit")]
	public System.Nullable<bool> payed
	{
		get
		{
			return this._payed;
		}
		set
		{
			if ((this._payed != value))
			{
				this.OnpayedChanging(value);
				this.SendPropertyChanging();
				this._payed = value;
				this.SendPropertyChanged("payed");
				this.OnpayedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Float")]
	public System.Nullable<double> amount
	{
		get
		{
			return this._amount;
		}
		set
		{
			if ((this._amount != value))
			{
				this.OnamountChanging(value);
				this.SendPropertyChanging();
				this._amount = value;
				this.SendPropertyChanged("amount");
				this.OnamountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> orderDate
	{
		get
		{
			return this._orderDate;
		}
		set
		{
			if ((this._orderDate != value))
			{
				this.OnorderDateChanging(value);
				this.SendPropertyChanging();
				this._orderDate = value;
				this.SendPropertyChanged("orderDate");
				this.OnorderDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeId", DbType="Int")]
	public System.Nullable<int> employeeId
	{
		get
		{
			return this._employeeId;
		}
		set
		{
			if ((this._employeeId != value))
			{
				if (this._Employee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnemployeeIdChanging(value);
				this.SendPropertyChanging();
				this._employeeId = value;
				this.SendPropertyChanged("employeeId");
				this.OnemployeeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Oder", Storage="_Customer", ThisKey="custId", OtherKey="CustomerID", IsForeignKey=true)]
	public Customer Customer
	{
		get
		{
			return this._Customer.Entity;
		}
		set
		{
			Customer previousValue = this._Customer.Entity;
			if (((previousValue != value) 
						|| (this._Customer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Customer.Entity = null;
					previousValue.Oders.Remove(this);
				}
				this._Customer.Entity = value;
				if ((value != null))
				{
					value.Oders.Add(this);
					this._custId = value.CustomerID;
				}
				else
				{
					this._custId = default(int);
				}
				this.SendPropertyChanged("Customer");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Oder", Storage="_Employee", ThisKey="employeeId", OtherKey="EmployeeID", IsForeignKey=true)]
	public Employee Employee
	{
		get
		{
			return this._Employee.Entity;
		}
		set
		{
			Employee previousValue = this._Employee.Entity;
			if (((previousValue != value) 
						|| (this._Employee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee.Entity = null;
					previousValue.Oders.Remove(this);
				}
				this._Employee.Entity = value;
				if ((value != null))
				{
					value.Oders.Add(this);
					this._employeeId = value.EmployeeID;
				}
				else
				{
					this._employeeId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Employee");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderLine")]
public partial class OrderLine : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _OrderLineID;
	
	private System.Nullable<int> _ProductID;
	
	private System.Nullable<int> _Quantity;
	
	private System.Nullable<int> _OrderID;
	
	private EntityRef<Product> _Product;
	
	private EntityRef<Oder1> _Oder1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderLineIDChanging(int value);
    partial void OnOrderLineIDChanged();
    partial void OnProductIDChanging(System.Nullable<int> value);
    partial void OnProductIDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnOrderIDChanging(System.Nullable<int> value);
    partial void OnOrderIDChanged();
    #endregion
	
	public OrderLine()
	{
		this._Product = default(EntityRef<Product>);
		this._Oder1 = default(EntityRef<Oder1>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderLineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int OrderLineID
	{
		get
		{
			return this._OrderLineID;
		}
		set
		{
			if ((this._OrderLineID != value))
			{
				this.OnOrderLineIDChanging(value);
				this.SendPropertyChanging();
				this._OrderLineID = value;
				this.SendPropertyChanged("OrderLineID");
				this.OnOrderLineIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int")]
	public System.Nullable<int> ProductID
	{
		get
		{
			return this._ProductID;
		}
		set
		{
			if ((this._ProductID != value))
			{
				if (this._Product.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProductIDChanging(value);
				this.SendPropertyChanging();
				this._ProductID = value;
				this.SendPropertyChanged("ProductID");
				this.OnProductIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
	public System.Nullable<int> Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int")]
	public System.Nullable<int> OrderID
	{
		get
		{
			return this._OrderID;
		}
		set
		{
			if ((this._OrderID != value))
			{
				if (this._Oder1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOrderIDChanging(value);
				this.SendPropertyChanging();
				this._OrderID = value;
				this.SendPropertyChanged("OrderID");
				this.OnOrderIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderLine", Storage="_Product", ThisKey="ProductID", OtherKey="Id", IsForeignKey=true)]
	public Product Product
	{
		get
		{
			return this._Product.Entity;
		}
		set
		{
			Product previousValue = this._Product.Entity;
			if (((previousValue != value) 
						|| (this._Product.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Product.Entity = null;
					previousValue.OrderLines.Remove(this);
				}
				this._Product.Entity = value;
				if ((value != null))
				{
					value.OrderLines.Add(this);
					this._ProductID = value.Id;
				}
				else
				{
					this._ProductID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Product");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Oder1_OrderLine", Storage="_Oder1", ThisKey="OrderID", OtherKey="orderId", IsForeignKey=true)]
	public Oder1 Oder1
	{
		get
		{
			return this._Oder1.Entity;
		}
		set
		{
			Oder1 previousValue = this._Oder1.Entity;
			if (((previousValue != value) 
						|| (this._Oder1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Oder1.Entity = null;
					previousValue.OrderLines.Remove(this);
				}
				this._Oder1.Entity = value;
				if ((value != null))
				{
					value.OrderLines.Add(this);
					this._OrderID = value.orderId;
				}
				else
				{
					this._OrderID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Oder1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products")]
public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _ProductName;
	
	private string _ProductDescription;
	
	private System.Nullable<double> _Price;
	
	private System.Nullable<int> _Quantity;
	
	private System.Nullable<bool> _Active;
	
	private System.Nullable<System.DateTime> _DateArrived;
	
	private System.Nullable<int> _SupplierID;
	
	private EntitySet<OrderLine> _OrderLines;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnProductDescriptionChanging(string value);
    partial void OnProductDescriptionChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnDateArrivedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateArrivedChanged();
    partial void OnSupplierIDChanging(System.Nullable<int> value);
    partial void OnSupplierIDChanged();
    #endregion
	
	public Product()
	{
		this._OrderLines = new EntitySet<OrderLine>(new Action<OrderLine>(this.attach_OrderLines), new Action<OrderLine>(this.detach_OrderLines));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="NChar(30)")]
	public string ProductName
	{
		get
		{
			return this._ProductName;
		}
		set
		{
			if ((this._ProductName != value))
			{
				this.OnProductNameChanging(value);
				this.SendPropertyChanging();
				this._ProductName = value;
				this.SendPropertyChanged("ProductName");
				this.OnProductNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductDescription", DbType="NChar(60)")]
	public string ProductDescription
	{
		get
		{
			return this._ProductDescription;
		}
		set
		{
			if ((this._ProductDescription != value))
			{
				this.OnProductDescriptionChanging(value);
				this.SendPropertyChanging();
				this._ProductDescription = value;
				this.SendPropertyChanged("ProductDescription");
				this.OnProductDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
	public System.Nullable<double> Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
	public System.Nullable<int> Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
	public System.Nullable<bool> Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateArrived", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateArrived
	{
		get
		{
			return this._DateArrived;
		}
		set
		{
			if ((this._DateArrived != value))
			{
				this.OnDateArrivedChanging(value);
				this.SendPropertyChanging();
				this._DateArrived = value;
				this.SendPropertyChanged("DateArrived");
				this.OnDateArrivedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierID", DbType="Int")]
	public System.Nullable<int> SupplierID
	{
		get
		{
			return this._SupplierID;
		}
		set
		{
			if ((this._SupplierID != value))
			{
				this.OnSupplierIDChanging(value);
				this.SendPropertyChanging();
				this._SupplierID = value;
				this.SendPropertyChanged("SupplierID");
				this.OnSupplierIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderLine", Storage="_OrderLines", ThisKey="Id", OtherKey="ProductID")]
	public EntitySet<OrderLine> OrderLines
	{
		get
		{
			return this._OrderLines;
		}
		set
		{
			this._OrderLines.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_OrderLines(OrderLine entity)
	{
		this.SendPropertyChanging();
		entity.Product = this;
	}
	
	private void detach_OrderLines(OrderLine entity)
	{
		this.SendPropertyChanging();
		entity.Product = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Suppliers")]
public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SupplierID;
	
	private string _SupplierName;
	
	private string _SupplierSurname;
	
	private string _SupplierCellNumber;
	
	private string _SupplierStreetName;
	
	private string _SupplierSuburb;
	
	private string _SupplierPostalCode;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplierIDChanging(int value);
    partial void OnSupplierIDChanged();
    partial void OnSupplierNameChanging(string value);
    partial void OnSupplierNameChanged();
    partial void OnSupplierSurnameChanging(string value);
    partial void OnSupplierSurnameChanged();
    partial void OnSupplierCellNumberChanging(string value);
    partial void OnSupplierCellNumberChanged();
    partial void OnSupplierStreetNameChanging(string value);
    partial void OnSupplierStreetNameChanged();
    partial void OnSupplierSuburbChanging(string value);
    partial void OnSupplierSuburbChanged();
    partial void OnSupplierPostalCodeChanging(string value);
    partial void OnSupplierPostalCodeChanged();
    #endregion
	
	public Supplier()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SupplierID
	{
		get
		{
			return this._SupplierID;
		}
		set
		{
			if ((this._SupplierID != value))
			{
				this.OnSupplierIDChanging(value);
				this.SendPropertyChanging();
				this._SupplierID = value;
				this.SendPropertyChanged("SupplierID");
				this.OnSupplierIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierName", DbType="NChar(30)")]
	public string SupplierName
	{
		get
		{
			return this._SupplierName;
		}
		set
		{
			if ((this._SupplierName != value))
			{
				this.OnSupplierNameChanging(value);
				this.SendPropertyChanging();
				this._SupplierName = value;
				this.SendPropertyChanged("SupplierName");
				this.OnSupplierNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierSurname", DbType="NChar(40)")]
	public string SupplierSurname
	{
		get
		{
			return this._SupplierSurname;
		}
		set
		{
			if ((this._SupplierSurname != value))
			{
				this.OnSupplierSurnameChanging(value);
				this.SendPropertyChanging();
				this._SupplierSurname = value;
				this.SendPropertyChanged("SupplierSurname");
				this.OnSupplierSurnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierCellNumber", DbType="NChar(20)")]
	public string SupplierCellNumber
	{
		get
		{
			return this._SupplierCellNumber;
		}
		set
		{
			if ((this._SupplierCellNumber != value))
			{
				this.OnSupplierCellNumberChanging(value);
				this.SendPropertyChanging();
				this._SupplierCellNumber = value;
				this.SendPropertyChanged("SupplierCellNumber");
				this.OnSupplierCellNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierStreetName", DbType="NChar(30)")]
	public string SupplierStreetName
	{
		get
		{
			return this._SupplierStreetName;
		}
		set
		{
			if ((this._SupplierStreetName != value))
			{
				this.OnSupplierStreetNameChanging(value);
				this.SendPropertyChanging();
				this._SupplierStreetName = value;
				this.SendPropertyChanged("SupplierStreetName");
				this.OnSupplierStreetNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierSuburb", DbType="NChar(30)")]
	public string SupplierSuburb
	{
		get
		{
			return this._SupplierSuburb;
		}
		set
		{
			if ((this._SupplierSuburb != value))
			{
				this.OnSupplierSuburbChanging(value);
				this.SendPropertyChanging();
				this._SupplierSuburb = value;
				this.SendPropertyChanged("SupplierSuburb");
				this.OnSupplierSuburbChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierPostalCode", DbType="NChar(10)")]
	public string SupplierPostalCode
	{
		get
		{
			return this._SupplierPostalCode;
		}
		set
		{
			if ((this._SupplierPostalCode != value))
			{
				this.OnSupplierPostalCodeChanging(value);
				this.SendPropertyChanging();
				this._SupplierPostalCode = value;
				this.SendPropertyChanged("SupplierPostalCode");
				this.OnSupplierPostalCodeChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _userId;
	
	private string _userName;
	
	private string _pass;
	
	private System.Nullable<int> _userTypeId;
	
	private EntityRef<UserType> _UserType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnpassChanging(string value);
    partial void OnpassChanged();
    partial void OnuserTypeIdChanging(System.Nullable<int> value);
    partial void OnuserTypeIdChanged();
    #endregion
	
	public User()
	{
		this._UserType = default(EntityRef<UserType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int userId
	{
		get
		{
			return this._userId;
		}
		set
		{
			if ((this._userId != value))
			{
				this.OnuserIdChanging(value);
				this.SendPropertyChanging();
				this._userId = value;
				this.SendPropertyChanged("userId");
				this.OnuserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NChar(10)")]
	public string userName
	{
		get
		{
			return this._userName;
		}
		set
		{
			if ((this._userName != value))
			{
				this.OnuserNameChanging(value);
				this.SendPropertyChanging();
				this._userName = value;
				this.SendPropertyChanged("userName");
				this.OnuserNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pass", DbType="NChar(10)")]
	public string pass
	{
		get
		{
			return this._pass;
		}
		set
		{
			if ((this._pass != value))
			{
				this.OnpassChanging(value);
				this.SendPropertyChanging();
				this._pass = value;
				this.SendPropertyChanged("pass");
				this.OnpassChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userTypeId", DbType="Int")]
	public System.Nullable<int> userTypeId
	{
		get
		{
			return this._userTypeId;
		}
		set
		{
			if ((this._userTypeId != value))
			{
				if (this._UserType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnuserTypeIdChanging(value);
				this.SendPropertyChanging();
				this._userTypeId = value;
				this.SendPropertyChanged("userTypeId");
				this.OnuserTypeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_User", Storage="_UserType", ThisKey="userTypeId", OtherKey="userTypeId", IsForeignKey=true)]
	public UserType UserType
	{
		get
		{
			return this._UserType.Entity;
		}
		set
		{
			UserType previousValue = this._UserType.Entity;
			if (((previousValue != value) 
						|| (this._UserType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UserType.Entity = null;
					previousValue.Users.Remove(this);
				}
				this._UserType.Entity = value;
				if ((value != null))
				{
					value.Users.Add(this);
					this._userTypeId = value.userTypeId;
				}
				else
				{
					this._userTypeId = default(Nullable<int>);
				}
				this.SendPropertyChanged("UserType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserType")]
public partial class UserType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _userTypeId;
	
	private string _userTypeName;
	
	private string _userTypeDescription;
	
	private EntitySet<User> _Users;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserTypeIdChanging(int value);
    partial void OnuserTypeIdChanged();
    partial void OnuserTypeNameChanging(string value);
    partial void OnuserTypeNameChanged();
    partial void OnuserTypeDescriptionChanging(string value);
    partial void OnuserTypeDescriptionChanged();
    #endregion
	
	public UserType()
	{
		this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int userTypeId
	{
		get
		{
			return this._userTypeId;
		}
		set
		{
			if ((this._userTypeId != value))
			{
				this.OnuserTypeIdChanging(value);
				this.SendPropertyChanging();
				this._userTypeId = value;
				this.SendPropertyChanged("userTypeId");
				this.OnuserTypeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userTypeName", DbType="NChar(10)")]
	public string userTypeName
	{
		get
		{
			return this._userTypeName;
		}
		set
		{
			if ((this._userTypeName != value))
			{
				this.OnuserTypeNameChanging(value);
				this.SendPropertyChanging();
				this._userTypeName = value;
				this.SendPropertyChanged("userTypeName");
				this.OnuserTypeNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userTypeDescription", DbType="NChar(10)")]
	public string userTypeDescription
	{
		get
		{
			return this._userTypeDescription;
		}
		set
		{
			if ((this._userTypeDescription != value))
			{
				this.OnuserTypeDescriptionChanging(value);
				this.SendPropertyChanging();
				this._userTypeDescription = value;
				this.SendPropertyChanged("userTypeDescription");
				this.OnuserTypeDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_User", Storage="_Users", ThisKey="userTypeId", OtherKey="userTypeId")]
	public EntitySet<User> Users
	{
		get
		{
			return this._Users;
		}
		set
		{
			this._Users.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.UserType = this;
	}
	
	private void detach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.UserType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Oders")]
public partial class Oder1 : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _orderId;
	
	private int _custId;
	
	private System.Nullable<bool> _payed;
	
	private System.Nullable<double> _amount;
	
	private System.Nullable<System.DateTime> _orderDate;
	
	private System.Nullable<int> _employeeId;
	
	private string _orderCode;
	
	private EntitySet<OrderLine> _OrderLines;
	
	private EntityRef<Customer> _Customer;
	
	private EntityRef<Employee> _Employee;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorderIdChanging(int value);
    partial void OnorderIdChanged();
    partial void OncustIdChanging(int value);
    partial void OncustIdChanged();
    partial void OnpayedChanging(System.Nullable<bool> value);
    partial void OnpayedChanged();
    partial void OnamountChanging(System.Nullable<double> value);
    partial void OnamountChanged();
    partial void OnorderDateChanging(System.Nullable<System.DateTime> value);
    partial void OnorderDateChanged();
    partial void OnemployeeIdChanging(System.Nullable<int> value);
    partial void OnemployeeIdChanged();
    partial void OnorderCodeChanging(string value);
    partial void OnorderCodeChanged();
    #endregion
	
	public Oder1()
	{
		this._OrderLines = new EntitySet<OrderLine>(new Action<OrderLine>(this.attach_OrderLines), new Action<OrderLine>(this.detach_OrderLines));
		this._Customer = default(EntityRef<Customer>);
		this._Employee = default(EntityRef<Employee>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int orderId
	{
		get
		{
			return this._orderId;
		}
		set
		{
			if ((this._orderId != value))
			{
				this.OnorderIdChanging(value);
				this.SendPropertyChanging();
				this._orderId = value;
				this.SendPropertyChanged("orderId");
				this.OnorderIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_custId", DbType="Int NOT NULL")]
	public int custId
	{
		get
		{
			return this._custId;
		}
		set
		{
			if ((this._custId != value))
			{
				if (this._Customer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OncustIdChanging(value);
				this.SendPropertyChanging();
				this._custId = value;
				this.SendPropertyChanged("custId");
				this.OncustIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_payed", DbType="Bit")]
	public System.Nullable<bool> payed
	{
		get
		{
			return this._payed;
		}
		set
		{
			if ((this._payed != value))
			{
				this.OnpayedChanging(value);
				this.SendPropertyChanging();
				this._payed = value;
				this.SendPropertyChanged("payed");
				this.OnpayedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Float")]
	public System.Nullable<double> amount
	{
		get
		{
			return this._amount;
		}
		set
		{
			if ((this._amount != value))
			{
				this.OnamountChanging(value);
				this.SendPropertyChanging();
				this._amount = value;
				this.SendPropertyChanged("amount");
				this.OnamountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> orderDate
	{
		get
		{
			return this._orderDate;
		}
		set
		{
			if ((this._orderDate != value))
			{
				this.OnorderDateChanging(value);
				this.SendPropertyChanging();
				this._orderDate = value;
				this.SendPropertyChanged("orderDate");
				this.OnorderDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeId", DbType="Int")]
	public System.Nullable<int> employeeId
	{
		get
		{
			return this._employeeId;
		}
		set
		{
			if ((this._employeeId != value))
			{
				if (this._Employee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnemployeeIdChanging(value);
				this.SendPropertyChanging();
				this._employeeId = value;
				this.SendPropertyChanged("employeeId");
				this.OnemployeeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderCode", DbType="NChar(10)")]
	public string orderCode
	{
		get
		{
			return this._orderCode;
		}
		set
		{
			if ((this._orderCode != value))
			{
				this.OnorderCodeChanging(value);
				this.SendPropertyChanging();
				this._orderCode = value;
				this.SendPropertyChanged("orderCode");
				this.OnorderCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Oder1_OrderLine", Storage="_OrderLines", ThisKey="orderId", OtherKey="OrderID")]
	public EntitySet<OrderLine> OrderLines
	{
		get
		{
			return this._OrderLines;
		}
		set
		{
			this._OrderLines.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Oder1", Storage="_Customer", ThisKey="custId", OtherKey="CustomerID", IsForeignKey=true)]
	public Customer Customer
	{
		get
		{
			return this._Customer.Entity;
		}
		set
		{
			Customer previousValue = this._Customer.Entity;
			if (((previousValue != value) 
						|| (this._Customer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Customer.Entity = null;
					previousValue.Oder1s.Remove(this);
				}
				this._Customer.Entity = value;
				if ((value != null))
				{
					value.Oder1s.Add(this);
					this._custId = value.CustomerID;
				}
				else
				{
					this._custId = default(int);
				}
				this.SendPropertyChanged("Customer");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Oder1", Storage="_Employee", ThisKey="employeeId", OtherKey="EmployeeID", IsForeignKey=true)]
	public Employee Employee
	{
		get
		{
			return this._Employee.Entity;
		}
		set
		{
			Employee previousValue = this._Employee.Entity;
			if (((previousValue != value) 
						|| (this._Employee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee.Entity = null;
					previousValue.Oder1s.Remove(this);
				}
				this._Employee.Entity = value;
				if ((value != null))
				{
					value.Oder1s.Add(this);
					this._employeeId = value.EmployeeID;
				}
				else
				{
					this._employeeId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Employee");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_OrderLines(OrderLine entity)
	{
		this.SendPropertyChanging();
		entity.Oder1 = this;
	}
	
	private void detach_OrderLines(OrderLine entity)
	{
		this.SendPropertyChanging();
		entity.Oder1 = null;
	}
}
#pragma warning restore 1591
